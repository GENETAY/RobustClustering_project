from RobustClustering import KbMOM
from math import inf
from numpy import isnan, array, arange, tile, array_equal
from numpy import round as np_round
import pytest

#####################
# test block_size_max
#####################

def test_block_size_max_no_outliers():
    n = 10000
    nb_outliers = 0
    assert KbMOM.block_size_max(n,nb_outliers) == inf
    
def test_block_size_max_50_outliers():
    n = 10000
    nb_outliers = 50
    assert KbMOM.block_size_max(n,nb_outliers) == 138

def test_block_size_max_half_outliers():
    n = 10000
    nb_outliers = 5000
    assert KbMOM.block_size_max(n,nb_outliers) == 1

# # there is a warning in that test i would like to get rid of
@pytest.mark.filterwarnings("ignore:block_size_max == 0")
def test_block_size_max_more_than_half_outliers():
    n = 10000
    nb_outliers = 5001
    assert KbMOM.block_size_max(n,nb_outliers) == 0

#######################
# test number_of_blocks
#######################

def test_number_of_blocks_no_outliers_10_blocks():
    n = 10000
    nb_outliers = 0
    block_size = 10
    alpha = 0.05
    output = KbMOM.minimal_number_of_blocks(n=n,nb_outliers=nb_outliers,block_size=block_size,alpha=alpha)
    assert output == 1
    
def test_number_of_blocks_180_outliers_10_blocks():
    n = 10000
    nb_outliers = 180
    block_size = 10
    alpha = 0.05
    output = KbMOM.minimal_number_of_blocks(n=n,nb_outliers=nb_outliers,block_size=block_size,alpha=alpha)
    assert output == 14

def test_number_of_blocks_200_outliers_34_blocks():
    n = 10000
    nb_outliers = 200
    block_size = 34
    alpha = 0.05
    output = KbMOM.minimal_number_of_blocks(n=n,nb_outliers=nb_outliers,block_size=block_size,alpha=alpha)
    assert output == 152175
    
def test_number_of_blocks_200_outliers_35_blocks():
    n = 10000
    nb_outliers = 200
    block_size = 35
    alpha = 0.05
    output = KbMOM.minimal_number_of_blocks(n=n,nb_outliers=nb_outliers,block_size=block_size,alpha=alpha)
    assert isnan(output)
    
def test_number_of_blocks_1800_outliers_10_blocks():
    n = 10000
    nb_outliers = 1800
    block_size = 10
    alpha = 0.05
    output = KbMOM.minimal_number_of_blocks(n=n,nb_outliers=nb_outliers,block_size=block_size,alpha=alpha)
    assert isnan(output)
    
#######################
# test stopping_crit
#######################

def test_stopping_crit():
    x_0 = 4
    list_x_n = [x_0]
    x_n_minus_1 = x_0
    for _ in range(10):
        x_n = x_n_minus_1*0.75+0.5
        list_x_n.append(x_n)
        x_n_minus_1 = x_n
    assert KbMOM.stopping_crit(list_x_n) == 2.0
    
##############################################
# test take_q_quantile_with_negative_pollution
##############################################

def test_take_q_quantile_with_negative_pollution_1():
    numpy_array = arange(100,0,-1)
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (50, 50, 0)

def test_take_q_quantile_with_negative_pollution_2():
    numpy_array = arange(101,0,-1)
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (50, 51, 0)

def test_take_q_quantile_with_negative_pollution_3():
    numpy_array = arange(100,0,-1)
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (20, 80, 0)

def test_take_q_quantile_with_negative_pollution_4():
    numpy_array = arange(101,0,-1)
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (20, 81, 0)

def test_take_q_quantile_with_negative_pollution_5():
    idx_to_discard = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = arange(100)
    numpy_array[idx_to_discard] = -1
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (50, 49, 20)

def test_take_q_quantile_with_negative_pollution_6():
    idx_to_discard = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = arange(101)
    numpy_array[idx_to_discard] = -1
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (49, 51, 20)

def test_take_q_quantile_with_negative_pollution_7():
    idx_to_discard = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = arange(100)
    numpy_array[idx_to_discard] = -1
    numpy_array = numpy_array[::-1]
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (20, 79, 20)
    
def test_take_q_quantile_with_negative_pollution_8():
    idx_to_discard = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = arange(101)
    numpy_array[idx_to_discard] = -1
    numpy_array = numpy_array[::-1]
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (19, 81, 20)
    
def test_take_q_quantile_with_negative_pollution_9():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=100)
    numpy_array[idx_to_keep] = arange(len(idx_to_keep))
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (54, 9, 80)

def test_take_q_quantile_with_negative_pollution_10():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=101)
    numpy_array[idx_to_keep] = arange(len(idx_to_keep))
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (55, 9, 81)

def test_take_q_quantile_with_negative_pollution_11():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=100)
    numpy_array[[98,99]] = array([98,99])
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (1, 98, 98)

def test_take_q_quantile_with_negative_pollution_12():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=101)
    numpy_array[[98,99]] = array([98,99])
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (2, 98, 99)
    
def test_take_q_quantile_with_negative_pollution_13():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=101)
    numpy_array[[98,99]] = array([98,99])
    numpy_array = numpy_array[::-1]
    q_quantile = 0.5
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (2, 98, 99)

def test_take_q_quantile_with_negative_pollution_14():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=100)
    numpy_array[[98,99]] = array([98,99])
    numpy_array = numpy_array[::-1]
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (1, 98, 98)
    
def test_take_q_quantile_with_negative_pollution_15():
    idx_to_keep = [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95]
    numpy_array = tile(A=-1,reps=101)
    numpy_array[[98,99]] = array([98,99])
    numpy_array = numpy_array[::-1]
    q_quantile = 0.8
    quantile_position, quantile_value,number_of_discard = KbMOM.take_q_quantile_with_negative_pollution(numpy_array,q_quantile)
    assert (quantile_position, quantile_value, number_of_discard) == (2, 98, 99)
    
##################
# test KbMOM.fit()
##################

from sklearn.datasets import make_blobs

# general test, test whole output
def test_fit_general():
    n = 1000
    dim = 2
    nb_outliers = 0
    random_state_make_blobs = 2
    random_state_kbmom = 1
    number_of_blocks = 140
    block_size = 25
    n_iter_max = 10
    q_quantile = 0.5
    confidence = 0.95
    init_by_kmeanspp = True
    nb_min_repr_by_cluster = 1
    Aitkens_criterion_allowed = True
    Aitkens_threshold = 0.00001
    estimated_number_of_outliers = None
    initial_centers = None
    data_depth_strategy = "block_members_distances"
    
    X,y,centers = make_blobs(n_samples=n,n_features=dim,return_centers=True,random_state=random_state_make_blobs)
    K = len(centers)
    
    kbmom = KbMOM(
        X=X,
        K=K,
        number_of_blocks=number_of_blocks,
        block_size = block_size,
        max_iter = n_iter_max,
        q_quantile = q_quantile,
        estimated_number_of_outliers = estimated_number_of_outliers,
        confidence = confidence,
        Aitkens_criterion_allowed = Aitkens_criterion_allowed,
        Aitkens_threshold = Aitkens_threshold,
        initial_centers = initial_centers,
        init_by_kmeanspp = init_by_kmeanspp,
        nb_min_repr_by_cluster = nb_min_repr_by_cluster,
        data_depth_strategy=data_depth_strategy,
        random_state = random_state_kbmom
    )
    output = kbmom.fit(X)
    
    output_expected = {
        
        'centroids': array([
            [-1.69272557, -9.50660627],
            [ 0.63142352, -1.17235827],
            [-1.76473991, -3.53699031]
        ])
        
        ,'labels': array([1, 2, 2, 0, 1, 0, 1, 1, 2, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 1, 2, 0,
       0, 2, 1, 1, 2, 2, 0, 1, 0, 0, 1, 2, 1, 0, 0, 1, 2, 0, 2, 1, 1, 2,
       1, 0, 0, 1, 1, 0, 0, 2, 0, 2, 2, 2, 1, 0, 1, 1, 2, 0, 2, 0, 0, 1,
       0, 1, 2, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 2, 2, 0, 1, 2, 0, 1, 2, 2,
       1, 1, 2, 0, 2, 0, 0, 2, 1, 0, 2, 0, 2, 2, 2, 1, 1, 1, 1, 0, 0, 1,
       0, 2, 1, 2, 0, 0, 0, 0, 1, 2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 2, 0,
       0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 0, 1, 2, 1, 0, 0, 1, 2, 1, 1, 1, 0,
       1, 0, 1, 1, 1, 1, 0, 2, 2, 1, 0, 1, 0, 1, 1, 1, 1, 2, 2, 0, 2, 1,
       1, 2, 1, 1, 2, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 2, 1, 1, 1, 0, 2, 1,
       1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 1, 0, 1,
       1, 2, 2, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 1,
       2, 1, 0, 0, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 2,
       2, 0, 1, 0, 1, 1, 1, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 1, 2, 0, 2, 0,
       1, 0, 2, 2, 2, 1, 2, 0, 1, 1, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0, 1,
       0, 0, 2, 1, 1, 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0,
       2, 0, 0, 2, 2, 2, 0, 1, 1, 2, 1, 0, 0, 1, 1, 0, 0, 2, 2, 0, 2, 1,
       1, 0, 1, 0, 1, 0, 0, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0,
       0, 2, 1, 2, 1, 0, 1, 0, 2, 2, 2, 1, 1, 0, 2, 1, 2, 2, 1, 0, 0, 1,
       0, 2, 2, 1, 2, 1, 0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 2, 2, 1, 2, 0, 2,
       2, 0, 1, 1, 2, 0, 0, 0, 1, 1, 1, 2, 2, 1, 1, 2, 1, 0, 0, 2, 1, 0,
       2, 1, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 2, 2, 0, 2, 1, 2,
       1, 1, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 2, 2,
       0, 0, 0, 1, 0, 2, 0, 1, 2, 1, 1, 1, 0, 2, 1, 0, 0, 0, 0, 1, 0, 0,
       2, 1, 2, 2, 0, 1, 0, 0, 2, 1, 1, 1, 0, 2, 1, 2, 0, 2, 2, 1, 1, 2,
       1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 0, 2, 2, 2, 2, 1,
       1, 2, 0, 2, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 2, 2,
       1, 0, 1, 2, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 2, 1, 1, 1, 2, 1, 1, 1,
       2, 1, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 0, 2, 1, 1, 2, 2, 0, 0, 1,
       0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 2, 1, 1, 0, 2, 0, 1, 0, 0, 1, 2, 0,
       1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 0, 0, 1, 2, 1, 0, 2, 1, 1, 2,
       0, 1, 2, 0, 0, 1, 1, 2, 1, 1, 0, 2, 1, 1, 0, 0, 2, 1, 2, 2, 1, 1,
       1, 0, 2, 2, 2, 1, 1, 1, 2, 1, 0, 2, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0,
       0, 2, 1, 0, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 1, 0, 2, 0, 1, 2, 1,
       2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2,
       0, 2, 1, 0, 2, 1, 1, 1, 0, 0, 1, 1, 2, 1, 1, 2, 0, 2, 1, 0, 0, 2,
       2, 1, 0, 1, 0, 2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2, 0, 1, 2, 1, 1, 2,
       1, 1, 2, 1, 1, 1, 2, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0, 0, 0, 2, 1, 2,
       0, 2, 2, 2, 0, 2, 2, 1, 1, 0, 2, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2,
       0, 1, 0, 1, 2, 1, 0, 1, 1, 2, 2, 0, 2, 1, 0, 1, 1, 2, 0, 2, 1, 0,
       1, 0, 1, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 2, 1, 1, 2, 2, 0, 0, 1,
       2, 1, 0, 1, 1, 2, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 2, 2, 1,
       0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 1, 2, 0, 2, 0, 1, 2, 1, 0, 0, 0, 0,
       0, 2, 2, 1, 0, 1, 1, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 2, 0, 0, 0, 0,
       0, 1, 2, 1, 1, 1, 2, 2, 2, 0, 2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 0, 1,
       0, 2, 2, 0, 1, 2, 0, 0, 1, 1, 1, 0, 2, 1, 0, 2, 0, 0, 2, 0, 1, 0,
       2, 1, 1, 1, 0, 1, 0, 2, 1, 0])
        
        ,'clusters_composition':None # not tested
        
        ,'q_quantile_block_at_initialization': [
            [35, 999, 803, 372, 502, 907, 423, 164, 173, 510, 359],
            [212, 681, 638, 860, 509, 935, 901, 871, 364, 884, 177, 176],
            [931, 230]
        ]
        
        ,'convergence': [None, None, 1.6015288990230756,
             1.6138625458485256, 1.6034998538447622,
             1.6134199089444936, 1.6709389856688774,
             1.6514887703783279, 1.641517508926362,
             1.6202449532537027, 1.6170766667442085]
        
        ,'data_depth': array([4.39459845, 4.52674644, 1.34675463, 4.3251135 , 3.98195058,
       1.28274554, 4.67847835, 4.75242253, 2.66859365, 5.12093279,
       5.21572723, 3.9121763 , 4.62906923, 3.75782617, 2.58932669,
       4.7253105 , 3.27755271, 4.4602463 , 3.73628682, 4.91251013,
       2.71636047, 4.98783309, 3.54391379, 4.58516106, 5.05909271,
       5.11269888, 2.96729227, 2.64567933, 3.06810475, 4.70072841,
       4.31886608, 3.25134358, 4.25396601, 5.09651824, 4.59243497,
       5.52300389, 1.41200289, 4.29370882, 1.84194304, 4.03473648,
       3.93608381, 5.16153557, 5.45699839, 0.47996033, 4.8970006 ,
       2.73576412, 4.64228819, 4.30484955, 4.39224751, 5.22370162,
       4.05383412, 3.15108296, 5.59517974, 4.65826586, 4.50427669,
       4.38333907, 4.64588757, 3.34980046, 5.26162968, 4.28603371,
       1.52571322, 5.07870279, 2.45285166, 2.76433175, 3.40770732,
       5.40213872, 2.68597964, 5.11955565, 2.68754048, 5.84557768,
       4.5174771 , 4.34959553, 3.10536905, 4.51398107, 2.60761102,
       3.64914281, 5.54537288, 3.215901  , 3.63655842, 5.25979885,
       3.9650674 , 3.11247106, 4.11142553, 2.31403159, 4.38082585,
       3.99427048, 3.36990153, 2.15844707, 4.32046876, 4.22859302,
       5.10024998, 5.29220438, 4.65447492, 1.50549853, 2.75590282,
       4.61265918, 4.38179628, 3.555254  , 4.70259095, 4.46742563,
       1.22268079, 2.19730383, 3.58619293, 1.53711349, 4.89122705,
       4.92697975, 5.5847646 , 2.74006923, 4.72430259, 2.75789538,
       1.73400361, 2.48570076, 4.15333667, 4.41904704, 2.86624766,
       4.68319919, 4.58414818, 0.6820875 , 4.82102981, 5.10047277,
       2.72600991, 2.32420905, 2.30693201, 4.39450212, 4.5919443 ,
       2.78975875, 3.73140586, 4.09383899, 4.8876692 , 5.20903823,
       1.90507503, 2.94892507, 5.437732  , 4.63335023, 2.74966904,
       5.19942312, 3.11060907, 4.3641238 , 1.56815525, 4.15381228,
       4.76040517, 4.45583735, 3.22265682, 3.93959734, 3.40598074,
       5.25878503, 4.52633322, 2.94642059, 4.37803412, 5.80538037,
       5.30340061, 4.02714646, 5.18285278, 4.96657015, 4.70590427,
       3.68436772, 4.14821076, 4.35967858, 5.00180843, 4.2463192 ,
       4.71035529, 4.47103497, 5.42049666, 4.10475141, 3.80185087,
       3.8452092 , 5.72857396, 4.72892657, 5.02113317, 5.17138619,
       4.16182945, 3.55858114, 2.03117974, 5.02449611, 3.28471972,
       4.52216248, 5.27242136, 5.90609571, 2.60504229, 4.20737314,
       5.35529951, 4.87717115, 4.01518174, 3.73210969, 3.64161262,
       4.51179116, 4.98581031, 2.25253069, 4.31406107, 4.62937261,
       3.22638483, 4.93997556, 5.40672277, 4.65215727, 4.33326652,
       3.4815775 , 3.8887689 , 4.14237508, 3.20139986, 3.19482693,
       2.89803015, 3.74051937, 4.46898309, 4.82774673, 5.16780316,
       3.4660073 , 5.54830711, 4.310002  , 0.83855129, 2.89916764,
       3.63384229, 3.14480191, 4.30944029, 4.5458468 , 2.46914897,
       3.02345631, 3.89265026, 4.08243461, 2.45454701, 5.76658026,
       4.32707682, 4.92603738, 2.84711436, 3.36122275, 3.83976837,
       3.89118664, 1.88705403, 3.46361753, 5.08206992, 4.67839498,
       4.71028955, 2.63572397, 4.73222446, 2.2829867 , 1.11291681,
       5.16647848, 2.69244371, 3.29553135, 4.58708651, 3.90645408,
       5.52773269, 2.00044722, 1.16448817, 4.70056336, 3.93499607,
       4.44772836, 4.72070531, 5.09378363, 3.89602913, 3.93976426,
       3.12968197, 5.56828319, 4.2028422 , 5.41773686, 4.29142031,
       3.41101976, 4.815373  , 5.36225389, 4.04713826, 4.57529183,
       4.74138921, 1.32776433, 5.62456235, 2.21618311, 2.11646054,
       5.13367119, 4.25766847, 1.53161058, 3.64774681, 4.86935978,
       5.58525713, 2.83871852, 4.80420877, 3.94977286, 5.4391957 ,
       5.21407382, 4.50202144, 4.76073055, 4.37886759, 3.3623803 ,
       1.86998022, 3.17831296, 2.92118193, 4.66135691, 5.89809495,
       3.72215205, 5.08319497, 0.67412417, 2.33794579, 3.60798776,
       3.0877182 , 4.22703085, 2.48894963, 3.46598445, 5.24079062,
       4.69920105, 4.5322495 , 4.02144628, 4.88838255, 3.66291221,
       4.19384967, 5.89530916, 3.3465262 , 1.77369475, 3.04088945,
       4.74942322, 4.07860297, 5.07727899, 5.15224565, 4.38715502,
       2.16232103, 4.32800766, 4.55910105, 5.65974633, 3.22555557,
       3.27533786, 3.37732765, 3.51453484, 3.31099009, 4.04891589,
       3.83173799, 3.31617021, 4.919391  , 4.05732632, 4.06689979,
       1.89676643, 2.68028142, 1.27595395, 1.8309807 , 2.25083579,
       2.71870278, 4.64793947, 1.52403722, 4.17367201, 3.21535531,
       4.51195817, 5.67774548, 0.64555385, 5.02172068, 4.87240987,
       2.43901566, 3.97054975, 1.79473436, 4.55414315, 4.84649898,
       4.01565136, 3.41567636, 2.53153769, 1.39826325, 3.82998244,
       4.49445304, 4.03158109, 4.53205081, 3.82920783, 4.10319061,
       5.52751762, 5.21735425, 4.13835389, 2.09762943, 1.68640804,
       4.88189735, 4.71320167, 4.55562493, 4.62287659, 4.14730597,
       2.20907333, 4.55185636, 4.7691235 , 3.99058478, 4.5950648 ,
       4.35073267, 4.47487343, 4.76273251, 4.32682921, 0.5490154 ,
       4.57370031, 0.74202458, 5.24185213, 4.95673783, 3.14890077,
       4.61765945, 4.39294558, 3.93981446, 3.34856507, 4.11994562,
       5.7208921 , 4.94510906, 4.38891043, 4.43741843, 4.32523557,
       1.94642144, 0.59515276, 4.46948341, 2.89798515, 3.59042493,
       5.33379707, 1.64043125, 4.05586549, 4.359483  , 4.4661242 ,
       4.80722788, 4.14970005, 2.13238762, 4.72527075, 4.4666864 ,
       4.77700544, 4.45785084, 1.84366435, 5.50272213, 3.70967917,
       4.12377449, 4.75610432, 3.04929313, 1.08060379, 4.51382266,
       4.21485438, 4.78989447, 2.26105616, 5.47382141, 5.04536508,
       5.55438477, 6.03162375, 4.20468996, 2.89294994, 3.30261782,
       4.26484872, 5.17372626, 4.36547349, 5.36513318, 1.99648157,
       3.21351597, 5.20535618, 4.81135265, 4.58100502, 5.38016541,
       3.14638625, 5.04186272, 4.40636348, 5.18762565, 0.89165352,
       4.07147416, 4.93542515, 3.90287476, 5.32862894, 4.30913838,
       3.22726587, 3.17673671, 4.00215122, 3.44536888, 4.80190367,
       2.29854371, 4.24424051, 4.55655482, 4.65603297, 1.9699573 ,
       5.47746904, 4.21761783, 4.63636566, 3.13218772, 4.09178785,
       4.67995246, 4.5228733 , 2.35932472, 5.9434177 , 1.519912  ,
       5.17607665, 4.79052468, 1.71690892, 3.51030638, 4.42527868,
       4.67491491, 3.20802517, 2.50869788, 1.12579187, 3.31726189,
       4.51682787, 3.65544861, 1.44561308, 4.11940746, 4.91121222,
       6.10850726, 3.98423365, 1.91914621, 3.0673496 , 3.53780337,
       3.22663072, 4.25521605, 4.18253201, 4.51625139, 1.95185284,
       3.50141948, 3.52272045, 2.10884788, 4.16231339, 3.09144004,
       4.86405923, 3.3091029 , 4.83032222, 4.16200711, 4.32813489,
       2.33768295, 5.28260904, 4.66485516, 4.15859973, 3.71193401,
       1.00698826, 1.08183805, 4.60504507, 3.81253377, 3.40449433,
       5.268273  , 4.8066927 , 3.22473109, 1.53974289, 3.61997468,
       5.1958968 , 4.26512753, 5.83251981, 4.9332681 , 3.34148596,
       3.88005708, 4.89999171, 2.08781836, 2.58717286, 3.07177004,
       4.73840563, 0.88577911, 4.3518954 , 4.58682902, 3.23400655,
       3.58174332, 4.18243709, 3.51269684, 4.522275  , 3.71419998,
       2.32826741, 3.68568086, 3.96824621, 3.26717238, 2.59838233,
       1.60573084, 4.70663256, 1.47977767, 5.22393892, 3.53684391,
       4.25363434, 4.32235154, 1.88882684, 2.20815996, 4.09635742,
       4.26094923, 3.68517873, 4.40711672, 3.81949439, 4.62704618,
       3.84420132, 4.82167173, 4.64322085, 3.53155371, 1.24199846,
       3.73348357, 3.7170153 , 6.06252153, 3.11617646, 4.70064272,
       5.18039184, 3.42147297, 3.61052218, 2.47665656, 5.30267711,
       2.54573474, 3.91424754, 5.44643668, 3.73383463, 5.79348955,
       2.52803388, 2.0451051 , 3.87392782, 4.77663524, 4.79479995,
       3.19591701, 5.14989338, 4.51077127, 3.64953969, 2.20243394,
       6.03306502, 4.03573886, 4.2288214 , 3.5724414 , 5.23312104,
       4.63282498, 2.21856643, 4.31205182, 3.37827939, 5.32643777,
       4.26487679, 4.15202182, 4.75878107, 5.66741357, 2.35784805,
       4.00151077, 3.98910145, 4.3804513 , 1.63565302, 3.83554923,
       0.857746  , 4.60309201, 3.72704064, 4.1240453 , 4.07330901,
       5.55833113, 3.64017854, 3.53998475, 3.06751854, 2.67352906,
       2.01218235, 3.44968201, 5.32372265, 4.68755972, 1.79942564,
       2.87812876, 3.01109967, 5.06173522, 3.51332538, 4.53209225,
       5.63585661, 4.32715221, 4.61715528, 4.69490834, 2.55550825,
       3.20215755, 1.87504095, 4.0642358 , 3.89015005, 1.49487518,
       4.08918534, 3.40934348, 3.78309031, 4.9933308 , 5.15972263,
       4.70872098, 4.47901863, 5.01415581, 3.98667055, 3.40804729,
       5.0833165 , 5.47225606, 3.59057798, 0.82953083, 2.52641668,
       4.2400081 , 2.50674314, 3.70010931, 3.97241289, 4.53977726,
       4.91535806, 4.12465902, 4.12209259, 3.55930337, 1.94068809,
       1.98074645, 3.83035855, 1.58906553, 4.1596798 , 4.61429354,
       2.46095121, 3.96979003, 1.60993947, 1.52434533, 1.86876978,
       5.97393331, 3.93687071, 4.91341807, 4.1873794 , 4.82989324,
       2.13829246, 2.47678059, 4.26447252, 3.99397519, 5.2440691 ,
       2.53797253, 5.13336514, 3.80715372, 4.99855946, 3.41559728,
       2.5387368 , 3.73255251, 3.57972228, 4.7539092 , 4.86977482,
       5.46084377, 4.12235112, 3.5540169 , 2.18869778, 4.68431048,
       4.45039545, 3.73208545, 4.13191192, 4.11423759, 5.12826287,
       0.22118719, 3.27758254, 4.06923695, 3.95046703, 2.86933081,
       3.29015847, 4.65963667, 4.35428422, 5.79220969, 4.33640069,
       2.09950461, 4.76185817, 2.29380169, 3.96010405, 4.12498849,
       5.00776219, 4.10024833, 3.94906574, 4.08655403, 4.1999411 ,
       4.85344519, 4.9480745 , 1.8667952 , 4.90667335, 2.67896857,
       4.19791374, 3.73308567, 3.38830177, 3.72215923, 4.33928767,
       4.9196033 , 3.26439942, 4.18461936, 4.238904  , 4.26934678,
       3.87701379, 3.8821891 , 4.11038717, 5.05418237, 4.59928855,
       4.02397374, 3.13619193, 4.11009504, 3.53135913, 5.04567968,
       1.7217369 , 4.22301628, 3.68933247, 3.91101216, 3.19036815,
       5.01631462, 4.98002224, 4.19020559, 5.34495473, 4.25327555,
       4.18449442, 3.70110847, 3.69365971, 3.72547623, 4.95897576,
       2.34306592, 5.77763379, 5.42371098, 3.67839921, 5.06518507,
       2.43633176, 3.16939538, 4.7554846 , 5.20773392, 5.23607856,
       4.53275204, 4.23417815, 4.23815582, 4.60936525, 4.31212502,
       4.68136935, 2.21230785, 4.38755585, 2.88858058, 4.7409763 ,
       2.71637941, 5.39206525, 5.33415122, 3.54946026, 4.25998626,
       3.9762112 , 4.27996133, 4.35977774, 4.14099683, 3.45849072,
       2.37851134, 1.75212077, 5.64178861, 2.41670571, 5.06655698,
       4.81730286, 3.59440602, 5.2004674 , 4.38320583, 4.38753296,
       4.15465749, 4.28294045, 3.05707903, 4.81961506, 3.41259667,
       4.3303681 , 5.29770567, 4.67753934, 2.31740337, 3.65648787,
       3.35606067, 3.57166822, 1.86181288, 4.09454013, 4.39523237,
       4.31256451, 3.97738703, 2.8474908 , 5.19670858, 3.93927096,
       2.45500257, 4.88866862, 4.89742271, 1.238847  , 0.74447002,
       2.89467358, 2.08827841, 5.3477587 , 2.96637875, 5.15372288,
       4.24402642, 3.23351821, 2.47201944, 5.31934274, 4.77004551,
       4.49765177, 4.24726363, 4.72966744, 2.52175827, 1.80856375,
       2.71962103, 3.94741793, 2.77978085, 4.09566601, 5.17336769,
       4.71989735, 4.03584958, 3.76710796, 3.12416732, 5.10739569,
       5.2197855 , 4.97337295, 4.17090239, 3.80975168, 1.99182468,
       4.28390768, 4.35505002, 3.16482007, 5.70610798, 3.93229319,
       5.20956498, 2.22590998, 4.2447019 , 5.15174181, 4.20913067,
       4.30229609, 2.83419696, 4.48295847, 4.46212905, 4.13847414,
       4.24392254, 4.0300668 , 2.73653255, 3.38338276, 4.70541327,
       4.8171519 , 2.62780446, 2.08548543, 5.42244034, 2.23644494,
       4.68454037, 4.52669059, 4.32555651, 3.59258824, 2.46265148,
       6.02222632, 4.82329287, 5.47615855, 3.94078924, 3.58773174,
       5.33519466, 3.64939289, 4.64341165, 3.71720905, 1.90213776,
       1.30763229, 5.76040329, 4.5889833 , 4.87425221, 4.68490654,
       2.51624364, 5.64503993, 4.14067824, 3.62294763, 3.95558682,
       2.50363922, 4.32201801, 4.29103491, 3.6856719 , 3.23362978,
       3.77891049, 4.33822504, 3.34501672, 4.28504176, 1.44670878,
       3.5438881 , 3.63395672, 3.60617586, 3.57923637, 5.15622881,
       3.11213515, 1.44670051, 4.49225253, 4.20099649, 0.9257061 ,
       4.37242652, 4.66002504, 2.90422176, 4.31154608, 4.92346956,
       4.35817061, 5.58738804, 4.04435876, 5.15364618, 5.08895122,
       2.93692654, 4.94999716, 4.38170468, 4.13051746, 5.55224225,
       4.34124313, 4.31363022, 4.88566456, 4.27584181, 2.31481204,
       4.37864741, 3.90316597, 3.47212637, 4.77111285, 3.49357155,
       4.03330436, 5.37801861, 2.28726929, 4.81509688, 2.32315961,
       4.44769172, 3.38838523, 4.06997397, 4.41894425, 5.77136372,
       5.2321885 , 2.32623404, 3.53459846, 4.00189457, 1.15236274,
       5.27371246, 3.62121818, 4.68465572, 3.79070708, 5.17429134,
       3.95820202, 3.6885155 , 4.4377653 , 5.43272631, 3.71658765,
       3.60412444, 5.56348728, 5.86243402, 2.90323928, 4.24733123,
       3.8227244 , 5.79313808, 3.57402299, 5.17100706, 5.25079518,
       5.05106802, 4.49590736, 3.66848421, 3.6996501 , 4.40960206,
       4.13169483, 4.29790927, 3.70362451, 4.57189477, 3.36974056,
       1.67462261, 1.16297749, 3.22687115, 2.38918173, 3.98437283])
        
        ,'all_data_risks': [2.2032162861544244, 2.032256328068281, 2.26470127910856,
             1.9844716285838238, 2.2390772810908985, 1.9729930806316474,
             1.997036129261829, 2.018686693824257, 2.296367478161084,
             2.0146046156181887, 1.9894399674287897]
        
        ,'quantile_block_risks': [2.0790547061556293, 1.663461845080694, 1.6095613231352055,
             1.6142355454093256, 1.6225142326771604, 1.7148213637845307,
             1.6311728951858857, 1.6580057115398508, 1.6152370858729892,
             1.6209091013492671, 1.6090924811985543]
        
        ,'list_of_all_quantile_block_centers_through_iterations': [
            array([[-1.74613534, -9.72789999],
                    [ 0.20418928, -1.64819104],
                    [-1.97069976, -4.02158432]]),
             array([[-0.86497019, -9.91719539],
                    [ 1.08885205, -1.72433859],
                    [-1.90255001, -3.41310267]]),
             array([[-1.79596465, -8.95033864],
                    [ 0.75196566, -1.47711614],
                    [-2.01031438, -2.87893741]]),
             array([[-1.2298605 , -9.28570993],
                    [ 0.98833814, -1.44326674],
                    [-1.21691045, -3.9358353 ]]),
             array([[-1.23843043, -8.58232682],
                    [ 1.01624794, -0.98431811],
                    [-1.35684313, -3.36089705]]),
             array([[-1.29735931, -9.29221308],
                    [ 0.7841509 , -1.52274186],
                    [-1.18280647, -3.39315711]]),
             array([[-1.1923073 , -9.35006677],
                    [ 0.60754607, -1.30650844],
                    [-1.64809121, -4.10155933]]),
             array([[-1.35190813, -9.20800984],
                    [ 0.61819382, -1.4730944 ],
                    [-1.25256973, -3.26075878]]),
             array([[-0.90126253, -9.51965038],
                    [ 0.98032036, -1.33530357],
                    [-0.48007104, -3.39542287]]),
             array([[-1.46768272, -9.85877454],
                    [ 1.50537404, -1.54492418],
                    [-1.56240873, -3.71022181]]),
             array([[-1.69272557, -9.50660627],
                    [ 0.63142352, -1.17235827],
                    [-1.76473991, -3.53699031]])
        ]
        
        ,'number_of_blocks': 140
        
        ,'block_size': 25
        
        ,'n_iter': 10
       }
    
    print(output['centroids'])
    
    assert array_equal(np_round(output['centroids'],8), output_expected['centroids'])
    assert array_equal(output['labels'], output_expected['labels'])
    assert output['q_quantile_block_at_initialization'] == output_expected['q_quantile_block_at_initialization']
    assert output['convergence'] == output_expected['convergence']
    assert array_equal(np_round(output['data_depth'],8), output_expected['data_depth'])
    assert output['all_data_risks'] == output_expected['all_data_risks']
    assert output['quantile_block_risks'] == output_expected['quantile_block_risks']
    assert array_equal(
        np_round(output['list_of_all_quantile_block_centers_through_iterations'],8),
        output_expected['list_of_all_quantile_block_centers_through_iterations']
    )
    assert output['number_of_blocks'] == output_expected['number_of_blocks']
    assert output['block_size'] == output_expected['block_size']
    assert output['n_iter'] == output_expected['n_iter']
    
# test depth denumber
def test_fit_denumber():
    n = 1000
    dim = 2
    nb_outliers = 0
    random_state_make_blobs = 2
    random_state_kbmom = 1
    number_of_blocks = 140
    block_size = 25
    n_iter_max = 10
    q_quantile = 0.5
    confidence = 0.95
    init_by_kmeanspp = True
    nb_min_repr_by_cluster = 1
    Aitkens_criterion_allowed = False
    Aitkens_threshold = 0.00001
    estimated_number_of_outliers = None
    initial_centers = None
    data_depth_strategy = "denumber"
    
    X,y,centers = make_blobs(n_samples=n,n_features=dim,return_centers=True,random_state=random_state_make_blobs)
    K = len(centers)
    
    kbmom = KbMOM(
        X=X,
        K=K,
        number_of_blocks=number_of_blocks,
        block_size = block_size,
        max_iter = n_iter_max,
        q_quantile = q_quantile,
        estimated_number_of_outliers = estimated_number_of_outliers,
        confidence = confidence,
        Aitkens_criterion_allowed=Aitkens_criterion_allowed,
        Aitkens_threshold = Aitkens_threshold,
        initial_centers = initial_centers,
        init_by_kmeanspp = init_by_kmeanspp,
        nb_min_repr_by_cluster = nb_min_repr_by_cluster,
        data_depth_strategy=data_depth_strategy,
        random_state = random_state_kbmom
    )
    output = kbmom.fit(X)
    
    output_expected = {
       'data_depth':
        array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
       0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
       0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
       1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
       0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
       0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
       1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
       1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
       0., 0., 0., 1., 1., 0., 1., 2., 0., 0., 1., 2., 0., 0., 0., 1., 1.,
       0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
       0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0.,
       1., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1.,
       0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
       0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
       0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
       0., 0., 1., 0., 0., 0., 0., 2., 0., 1., 0., 0., 0., 0., 1., 2., 0.,
       0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
       0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
       1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 2., 0., 1., 0.,
       0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
       2., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
       1., 2., 0., 0., 2., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
       0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1.,
       2., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
       0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
       0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
       1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
       0., 0., 0., 2., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
       0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0.,
       0., 1., 0., 0., 0., 1., 0., 3., 0., 0., 0., 1., 0., 0., 0., 0., 2.,
       0., 1., 0., 0., 0., 0., 0., 0., 2., 0., 2., 0., 0., 0., 0., 1., 0.,
       0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
       0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 1., 0., 0., 0.,
       1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
       0., 0., 1., 3., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
       0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
       0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
       0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 0., 0., 0., 0., 1.,
       0., 1., 1., 2., 0., 1., 0., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
       1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 2., 0., 0., 0., 1.,
       1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
       0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
       1., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
       1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 1., 0., 2., 1.,
       2., 0., 2., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 0.,
       0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.])
    }
        
    assert array_equal(output['data_depth'], output_expected['data_depth'])
    
# test depth "centroids_distances"
def test_fit_centroids_distances():
    n = 1000
    dim = 2
    nb_outliers = 0
    random_state_make_blobs = 2
    random_state_kbmom = 1
    number_of_blocks = 140
    block_size = 25
    n_iter_max = 10
    q_quantile = 0.5
    confidence = 0.95
    init_by_kmeanspp = True
    nb_min_repr_by_cluster = 1
    Aitkens_criterion_allowed = False
    Aitkens_threshold = 0.00001
    estimated_number_of_outliers = None
    initial_centers = None
    data_depth_strategy = "centroids_distances"
    
    X,y,centers = make_blobs(n_samples=n,n_features=dim,return_centers=True,random_state=random_state_make_blobs)
    K = len(centers)
    
    kbmom = KbMOM(
        X=X,
        K=K,
        number_of_blocks=number_of_blocks,
        block_size = block_size,
        max_iter = n_iter_max,
        q_quantile = q_quantile,
        estimated_number_of_outliers = estimated_number_of_outliers,
        confidence = confidence,
        Aitkens_criterion_allowed=Aitkens_criterion_allowed,
        Aitkens_threshold = Aitkens_threshold,
        initial_centers = initial_centers,
        init_by_kmeanspp = init_by_kmeanspp,
        nb_min_repr_by_cluster = nb_min_repr_by_cluster,
        data_depth_strategy=data_depth_strategy,
        random_state = random_state_kbmom
    )
    output = kbmom.fit(X)
    
    output_expected = {
       'data_depth':
        array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.57745374e-01, 1.36917498e-01,
       0.00000000e+00, 0.00000000e+00, 1.45769933e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       8.21214985e-02, 0.00000000e+00, 0.00000000e+00, 6.26441461e-01,
       2.29885956e-01, 0.00000000e+00, 6.58897119e-02, 0.00000000e+00,
       0.00000000e+00, 3.11898647e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.09934800e-01, 0.00000000e+00, 7.75598134e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       5.76882508e-02, 1.86656257e-01, 0.00000000e+00, 0.00000000e+00,
       4.21825423e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 5.95168010e-01, 4.02100578e-03,
       1.57010689e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 7.58146980e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.37288638e-02, 1.67111509e-01, 0.00000000e+00,
       0.00000000e+00, 3.64235330e-01, 6.51826541e-02, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.08249883e-01, 0.00000000e+00, 0.00000000e+00, 3.39546801e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 3.58633040e-02, 6.93913745e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.89488534e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.48108187e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.94379481e-01, 3.97836320e-02, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.45587106e-01, 0.00000000e+00,
       1.36978661e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.55398698e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.63239023e-01,
       5.41355519e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.68230403e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.32901854e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.66526921e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.32077140e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.92007277e-01, 7.30553536e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 6.54408661e-01, 4.38221714e-01, 0.00000000e+00,
       4.16514737e-01, 5.33938218e-01, 0.00000000e+00, 0.00000000e+00,
       7.73359937e-01, 6.58014754e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.11568197e-01, 3.85267129e-01, 0.00000000e+00,
       0.00000000e+00, 5.33753632e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       5.14144586e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 4.83889165e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.25909413e-01,
       3.70051018e-01, 0.00000000e+00, 0.00000000e+00, 2.16109352e-01,
       6.40602580e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.55597735e-02,
       0.00000000e+00, 0.00000000e+00, 1.01195350e-31, 0.00000000e+00,
       3.82714865e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       9.92862960e-02, 0.00000000e+00, 1.02062681e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.24224409e-01,
       0.00000000e+00, 1.02046335e-01, 6.28266325e-01, 4.21529712e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.59309946e-02,
       0.00000000e+00, 0.00000000e+00, 4.55305556e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.01850838e-01,
       0.00000000e+00, 1.65175291e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.47991224e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.19257820e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.56593882e-01, 8.18446099e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.33335439e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.36311008e-02,
       0.00000000e+00, 8.21587478e-04, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.80742086e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.79699580e-02, 0.00000000e+00, 0.00000000e+00,
       1.88834682e-01, 4.23976061e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       8.68427891e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.93122318e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.62041890e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.86640731e-02, 3.35072237e-03, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       3.08596532e-02, 0.00000000e+00, 0.00000000e+00, 4.02773015e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.43875510e-01, 0.00000000e+00, 9.93832830e-02, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.64528166e-02,
       2.00349784e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 2.99665449e-01, 0.00000000e+00, 1.03941384e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 5.65042949e-02, 5.11514516e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.31426201e-01, 0.00000000e+00, 0.00000000e+00, 7.58543738e-04,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.25388283e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.79649585e-01,
       2.27441198e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.72410763e-01, 2.94215806e-01,
       0.00000000e+00, 6.78260467e-01, 0.00000000e+00, 3.39730453e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.87498616e-01,
       6.08545192e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.37651879e-01, 0.00000000e+00, 3.30939153e-01, 0.00000000e+00,
       0.00000000e+00, 2.59079062e-01, 4.58556186e-01, 4.90706776e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.28623895e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.65599136e-01, 0.00000000e+00, 4.44080620e-02,
       5.62013395e-01, 0.00000000e+00, 0.00000000e+00, 3.31531434e-01,
       0.00000000e+00, 0.00000000e+00, 2.13911452e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       5.54453856e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.87813513e-01, 0.00000000e+00, 1.04407130e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 5.43703196e-03, 6.68640069e-03, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.11187723e-01, 0.00000000e+00,
       0.00000000e+00, 4.19506216e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 7.37534862e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.08214947e-01,
       0.00000000e+00, 2.05182268e-01, 4.24519280e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.78713152e-01,
       0.00000000e+00, 5.48487837e-01, 0.00000000e+00, 6.17747905e-03,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.62006322e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.83456936e-01, 3.85932222e-02, 1.04888206e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.88233653e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 7.24963295e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 8.34898604e-02, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 3.05013164e-01, 1.31647225e-01,
       0.00000000e+00, 0.00000000e+00, 2.99866370e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 4.96146007e-03, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.54568512e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.63044743e-01, 3.20022269e-03,
       0.00000000e+00, 4.70285390e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.46616994e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 3.63833388e-01, 0.00000000e+00,
       0.00000000e+00, 5.72002827e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.07946386e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 4.40591504e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.66303504e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 5.96174565e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       3.57489803e-03, 0.00000000e+00, 1.70496592e-01, 0.00000000e+00,
       0.00000000e+00, 2.77373558e-01, 0.00000000e+00, 0.00000000e+00,
       3.25787765e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.35437571e-02, 0.00000000e+00, 2.17098422e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.26338465e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.46074761e-01,
       0.00000000e+00, 5.89036123e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       4.40570101e-01, 0.00000000e+00, 4.93885062e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.18365688e-03,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.72569506e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.51522410e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.80855557e-03,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.99074282e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       5.11998917e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.23517647e-01, 0.00000000e+00, 2.14742659e-01, 0.00000000e+00,
       5.82754978e-03, 2.79595216e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.06527452e-01, 0.00000000e+00,
       3.90869202e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.34241855e-02, 4.25275784e-02, 1.19873037e-03, 0.00000000e+00,
       0.00000000e+00, 2.80224803e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 4.28274537e-01, 0.00000000e+00,
       2.48690756e-01, 0.00000000e+00, 0.00000000e+00, 3.42985369e-01,
       2.45667364e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00952562e-02,
       1.60545797e-01, 0.00000000e+00, 0.00000000e+00, 3.57332081e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.03535878e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 3.24647609e-01, 0.00000000e+00,
       0.00000000e+00, 4.74545551e-01, 0.00000000e+00, 9.45726911e-01,
       0.00000000e+00, 0.00000000e+00, 3.10630628e-01, 0.00000000e+00,
       9.66329176e-02, 0.00000000e+00, 2.16981294e-01, 0.00000000e+00,
       0.00000000e+00, 1.45209623e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.60622678e-01,
       0.00000000e+00, 1.85624312e-01, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 2.77034153e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.21113208e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 4.38028591e-04, 0.00000000e+00, 4.09275977e-01,
       1.32271297e-01, 7.39261103e-01, 0.00000000e+00, 3.11341166e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.25528939e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.12587169e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       2.04249560e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.19104955e-01, 1.68584823e-02, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.97549064e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.57289103e-01, 8.09939314e-01, 0.00000000e+00, 2.63969648e-02,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.40623327e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.42752453e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 1.48040349e-01, 0.00000000e+00, 0.00000000e+00,
       1.62636288e-02, 0.00000000e+00, 0.00000000e+00, 1.01195350e-31,
       0.00000000e+00, 0.00000000e+00, 6.50381603e-01, 1.42930633e-01,
       3.96690390e-01, 8.83721098e-01, 0.00000000e+00, 3.76999862e-01,
       0.00000000e+00, 0.00000000e+00, 2.39265781e-01, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       1.02447810e-01, 0.00000000e+00, 0.00000000e+00, 4.36524329e-01,
       5.40080301e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 4.84770730e-01, 0.00000000e+00, 5.36128022e-01,
       3.41728682e-01, 0.00000000e+00, 0.00000000e+00, 5.29543551e-01,
       0.00000000e+00, 1.58185121e-02, 0.00000000e+00, 5.37179036e-01,
       2.39338461e-02, 9.07188674e-01, 0.00000000e+00, 1.68693041e-01,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 3.00308933e-03, 2.40711568e-02, 3.64913255e-01,
       0.00000000e+00, 1.12092442e-01, 0.00000000e+00, 2.39215985e-02,
       9.17154513e-04, 0.00000000e+00, 0.00000000e+00, 1.34916775e-01,
       4.00101150e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 1.71538801e-02, 6.33961421e-01])
    }
        
    assert array_equal(np_round(output['data_depth'],7), np_round(output_expected['data_depth'],7))
    
# test kmedians++ initialization (kmeans++ init was already tested in the general test)
def test_fit_kmedianspp_intialization():
    n = 1000
    dim = 2
    nb_outliers = 0
    random_state_make_blobs = 2
    random_state_kbmom = 1
    number_of_blocks = 140
    block_size = 25
    n_iter_max = 0
    q_quantile = 0.5
    confidence = 0.95
    init_by_kmeanspp = False
    nb_min_repr_by_cluster = 1
    Aitkens_criterion_allowed = False
    Aitkens_threshold = 0.00001
    estimated_number_of_outliers = None
    initial_centers = None
    data_depth_strategy = "denumber"
    
    X,y,centers = make_blobs(n_samples=n,n_features=dim,return_centers=True,random_state=random_state_make_blobs)
    K = len(centers)
    
    kbmom = KbMOM(
        X=X,
        K=K,
        number_of_blocks=number_of_blocks,
        block_size = block_size,
        max_iter = n_iter_max,
        q_quantile = q_quantile,
        estimated_number_of_outliers = estimated_number_of_outliers,
        confidence = confidence,
        Aitkens_criterion_allowed=Aitkens_criterion_allowed,
        Aitkens_threshold = Aitkens_threshold,
        initial_centers = initial_centers,
        init_by_kmeanspp = init_by_kmeanspp,
        nb_min_repr_by_cluster = nb_min_repr_by_cluster,
        data_depth_strategy=data_depth_strategy,
        random_state = random_state_kbmom
    )
    output = kbmom.fit(X)
    
    output_expected = {
       'centroids':array([
           [-1.74613534, -9.72789999],
           [ 0.20418928, -1.64819104],
           [-1.97069976, -4.02158432]
       ])}
        
    assert array_equal(np_round(output['centroids'],8), output_expected['centroids'])